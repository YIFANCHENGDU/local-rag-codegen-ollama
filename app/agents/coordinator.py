from typing import Dict, Any, List
import logging
from app.agents.product_manager import ProductManagerAgent
from app.agents.developer import DeveloperAgent
from app.agents.tester import TesterAgent
from app.core.rag import rag_system

logger = logging.getLogger(__name__)


class MultiAgentCoordinator:
    """Coordinates the multi-agent workflow for code generation."""
    
    def __init__(self):
        self.product_manager = ProductManagerAgent()
        self.developer = DeveloperAgent()
        self.tester = TesterAgent()
    
    async def generate_code(self, instruction: str) -> Dict[str, Any]:
        """Execute the full multi-agent workflow for code generation."""
        try:
            logger.info(f"Starting multi-agent workflow for: {instruction}")
            
            # Step 1: Retrieve relevant context from RAG system
            rag_context = await rag_system.search_documents(instruction, n_results=5)
            logger.info(f"Retrieved {len(rag_context)} relevant documents from knowledge base")
            
            # Step 2: Product Manager analyzes requirements
            pm_context = {
                "instruction": instruction,
                "rag_context": rag_context
            }
            pm_result = await self.product_manager.process(pm_context)
            logger.info("Product Manager completed requirements analysis")
            
            # Step 3: Developer implements code based on specifications
            dev_context = {
                "instruction": instruction,
                "specifications": pm_result["specifications"],
                "rag_context": rag_context
            }
            dev_result = await self.developer.process(dev_context)
            logger.info("Developer completed code implementation")
            
            # Step 4: Tester reviews code and creates tests
            test_context = {
                "instruction": instruction,
                "specifications": pm_result["specifications"],
                "code": dev_result["code"]
            }
            test_result = await self.tester.process(test_context)
            logger.info("Tester completed code review and test generation")
            
            # Step 5: Compile final result
            final_result = {
                "workflow": "multi-agent",
                "agents_involved": [
                    {"name": self.product_manager.name, "role": self.product_manager.role},
                    {"name": self.developer.name, "role": self.developer.role},
                    {"name": self.tester.name, "role": self.tester.role}
                ],
                "original_instruction": instruction,
                "rag_context_used": len(rag_context),
                "product_manager": {
                    "specifications": pm_result["specifications"],
                    "raw_response": pm_result.get("raw_response", "")
                },
                "developer": {
                    "implementation": dev_result["code"],
                    "raw_response": dev_result.get("raw_response", "")
                },
                "tester": {
                    "review": test_result["review"],
                    "raw_response": test_result.get("raw_response", "")
                }
            }
            
            logger.info("Multi-agent workflow completed successfully")
            return final_result
            
        except Exception as e:
            logger.error(f"Error in multi-agent workflow: {e}")
            raise
    
    async def get_files_for_workspace(self, result: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract all files that should be written to workspace from the multi-agent result."""
        files = []
        
        try:
            # Get implementation files from developer
            dev_files = result.get("developer", {}).get("implementation", {}).get("files", [])
            for file_info in dev_files:
                files.append({
                    "path": file_info["path"],
                    "content": file_info["content"],
                    "source": "developer",
                    "description": file_info.get("description", "Generated by Developer Agent")
                })
            
            # Get test files from tester
            test_files = result.get("tester", {}).get("review", {}).get("test_files", [])
            for file_info in test_files:
                files.append({
                    "path": file_info["path"],
                    "content": file_info["content"],
                    "source": "tester",
                    "description": file_info.get("description", "Generated by Tester Agent")
                })
            
            return files
            
        except Exception as e:
            logger.error(f"Error extracting files from result: {e}")
            return []
    
    async def get_setup_commands(self, result: Dict[str, Any]) -> List[str]:
        """Extract setup commands from the multi-agent result."""
        commands = []
        
        try:
            # Get dependencies and setup commands from developer
            implementation = result.get("developer", {}).get("implementation", {})
            
            # Add dependency installation commands
            dependencies = implementation.get("dependencies", [])
            if dependencies:
                # Common package managers
                if any(dep for dep in dependencies if not dep.startswith(('http', 'git'))):
                    commands.append(f"pip install {' '.join(dependencies)}")
            
            # Add specific setup commands
            setup_commands = implementation.get("setup_commands", [])
            commands.extend(setup_commands)
            
            # Add test running command if tests were generated
            test_files = result.get("tester", {}).get("review", {}).get("test_files", [])
            if test_files:
                commands.append("python -m pytest")
            
            return commands
            
        except Exception as e:
            logger.error(f"Error extracting setup commands: {e}")
            return []


# Global coordinator instance
multi_agent_coordinator = MultiAgentCoordinator()